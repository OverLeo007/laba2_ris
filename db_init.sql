-- Таблица для хранения информации о лауреатах
CREATE TABLE laureates
(
    id                INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    origin_id         INT,
    firstname         VARCHAR(100),
    surname           VARCHAR(100),
    born              DATE,
    died              DATE,
    born_country      VARCHAR(100),
    born_country_code VARCHAR(10),
    born_city         VARCHAR(100),
    died_country      VARCHAR(100),
    died_country_code VARCHAR(10),
    died_city         VARCHAR(100),
    gender            VARCHAR(10)
);


-- Таблица для хранения информации о призах, связанных с лауреатом
CREATE TABLE prizes
(
    id          INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    laureate_id INT         REFERENCES laureates (id) ON DELETE SET NULL,
    year        INT         NOT NULL,
    category    VARCHAR(50) NOT NULL,
    share       INT,
    motivation  TEXT
);

-- Таблица для хранения информации о членствах/афилиациях, связанных с призом
CREATE TABLE affiliations
(
    id       INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    prize_id INT REFERENCES prizes (id) ON DELETE SET NULL,
    name     VARCHAR(255),
    city     VARCHAR(100),
    country  VARCHAR(100)
);

-- Таблица содержащая информацию о последнем обновлении базы данных
CREATE TABLE laureates_metadata
(
    id              SERIAL PRIMARY KEY,
    last_updated    TIMESTAMP NOT NULL,
    laureates_count INT       NOT NULL
);

-- Триггер для обновления метаданных о лауреатах
CREATE OR REPLACE FUNCTION update_laureates_metadata()
    RETURNS TRIGGER AS $$
BEGIN
    -- Обновляем дату последнего обновления
    UPDATE laureates_metadata
    SET last_updated = CURRENT_TIMESTAMP,
        laureates_count = (SELECT COUNT(*) FROM laureates)
    WHERE id = 1;

    -- Если в таблице laureates_metadata еще нет записи, вставляем новую
    IF NOT FOUND THEN
        INSERT INTO laureates_metadata (last_updated, laureates_count)
        VALUES (CURRENT_TIMESTAMP, (SELECT COUNT(*) FROM laureates));
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_laureates_metadata
    AFTER INSERT OR UPDATE OR DELETE ON laureates
    FOR EACH STATEMENT
EXECUTE FUNCTION update_laureates_metadata();
