/*
 * This file is generated by jOOQ.
 */
package ru.paskal.laba2.entities.tables.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.paskal.laba2.entities.tables.Keys;
import ru.paskal.laba2.entities.tables.Laba2;
import ru.paskal.laba2.entities.tables.tables.records.UserEntityRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserEntity extends TableImpl<UserEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>laba2.user_entity</code>
     */
    public static final UserEntity USER_ENTITY = new UserEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserEntityRecord> getRecordType() {
        return UserEntityRecord.class;
    }

    /**
     * The column <code>laba2.user_entity.id</code>.
     */
    public final TableField<UserEntityRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>laba2.user_entity.enabled</code>.
     */
    public final TableField<UserEntityRecord, Boolean> ENABLED = createField(DSL.name("enabled"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>laba2.user_entity.password</code>.
     */
    public final TableField<UserEntityRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>laba2.user_entity.role</code>.
     */
    public final TableField<UserEntityRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>laba2.user_entity.username</code>.
     */
    public final TableField<UserEntityRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255), this, "");

    private UserEntity(Name alias, Table<UserEntityRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private UserEntity(Name alias, Table<UserEntityRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>laba2.user_entity</code> table reference
     */
    public UserEntity(String alias) {
        this(DSL.name(alias), USER_ENTITY);
    }

    /**
     * Create an aliased <code>laba2.user_entity</code> table reference
     */
    public UserEntity(Name alias) {
        this(alias, USER_ENTITY);
    }

    /**
     * Create a <code>laba2.user_entity</code> table reference
     */
    public UserEntity() {
        this(DSL.name("user_entity"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Laba2.LABA2;
    }

    @Override
    public Identity<UserEntityRecord, Integer> getIdentity() {
        return (Identity<UserEntityRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserEntityRecord> getPrimaryKey() {
        return Keys.USER_ENTITY_PKEY;
    }

    @Override
    public UserEntity as(String alias) {
        return new UserEntity(DSL.name(alias), this);
    }

    @Override
    public UserEntity as(Name alias) {
        return new UserEntity(alias, this);
    }

    @Override
    public UserEntity as(Table<?> alias) {
        return new UserEntity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(String name) {
        return new UserEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(Name name) {
        return new UserEntity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserEntity rename(Table<?> name) {
        return new UserEntity(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserEntity where(Condition condition) {
        return new UserEntity(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserEntity where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserEntity where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserEntity where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserEntity where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserEntity where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserEntity where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public UserEntity where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserEntity whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public UserEntity whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
