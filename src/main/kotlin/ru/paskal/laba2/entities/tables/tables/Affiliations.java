/*
 * This file is generated by jOOQ.
 */
package ru.paskal.laba2.entities.tables.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.paskal.laba2.entities.tables.Keys;
import ru.paskal.laba2.entities.tables.Laba2;
import ru.paskal.laba2.entities.tables.tables.Prizes.PrizesPath;
import ru.paskal.laba2.entities.tables.tables.records.AffiliationsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Affiliations extends TableImpl<AffiliationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>laba2.affiliations</code>
     */
    public static final Affiliations AFFILIATIONS = new Affiliations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AffiliationsRecord> getRecordType() {
        return AffiliationsRecord.class;
    }

    /**
     * The column <code>laba2.affiliations.id</code>.
     */
    public final TableField<AffiliationsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>laba2.affiliations.prize_id</code>.
     */
    public final TableField<AffiliationsRecord, Integer> PRIZE_ID = createField(DSL.name("prize_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>laba2.affiliations.name</code>.
     */
    public final TableField<AffiliationsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>laba2.affiliations.city</code>.
     */
    public final TableField<AffiliationsRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>laba2.affiliations.country</code>.
     */
    public final TableField<AffiliationsRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(100), this, "");

    private Affiliations(Name alias, Table<AffiliationsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Affiliations(Name alias, Table<AffiliationsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>laba2.affiliations</code> table reference
     */
    public Affiliations(String alias) {
        this(DSL.name(alias), AFFILIATIONS);
    }

    /**
     * Create an aliased <code>laba2.affiliations</code> table reference
     */
    public Affiliations(Name alias) {
        this(alias, AFFILIATIONS);
    }

    /**
     * Create a <code>laba2.affiliations</code> table reference
     */
    public Affiliations() {
        this(DSL.name("affiliations"), null);
    }

    public <O extends Record> Affiliations(Table<O> path, ForeignKey<O, AffiliationsRecord> childPath, InverseForeignKey<O, AffiliationsRecord> parentPath) {
        super(path, childPath, parentPath, AFFILIATIONS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AffiliationsPath extends Affiliations implements Path<AffiliationsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AffiliationsPath(Table<O> path, ForeignKey<O, AffiliationsRecord> childPath, InverseForeignKey<O, AffiliationsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AffiliationsPath(Name alias, Table<AffiliationsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AffiliationsPath as(String alias) {
            return new AffiliationsPath(DSL.name(alias), this);
        }

        @Override
        public AffiliationsPath as(Name alias) {
            return new AffiliationsPath(alias, this);
        }

        @Override
        public AffiliationsPath as(Table<?> alias) {
            return new AffiliationsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Laba2.LABA2;
    }

    @Override
    public Identity<AffiliationsRecord, Integer> getIdentity() {
        return (Identity<AffiliationsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<AffiliationsRecord> getPrimaryKey() {
        return Keys.AFFILIATIONS_PKEY;
    }

    @Override
    public List<ForeignKey<AffiliationsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AFFILIATIONS__AFFILIATIONS_PRIZE_ID_FKEY);
    }

    private transient PrizesPath _prizes;

    /**
     * Get the implicit join path to the <code>laba2.prizes</code> table.
     */
    public PrizesPath prizes() {
        if (_prizes == null)
            _prizes = new PrizesPath(this, Keys.AFFILIATIONS__AFFILIATIONS_PRIZE_ID_FKEY, null);

        return _prizes;
    }

    @Override
    public Affiliations as(String alias) {
        return new Affiliations(DSL.name(alias), this);
    }

    @Override
    public Affiliations as(Name alias) {
        return new Affiliations(alias, this);
    }

    @Override
    public Affiliations as(Table<?> alias) {
        return new Affiliations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Affiliations rename(String name) {
        return new Affiliations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Affiliations rename(Name name) {
        return new Affiliations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Affiliations rename(Table<?> name) {
        return new Affiliations(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affiliations where(Condition condition) {
        return new Affiliations(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affiliations where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affiliations where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affiliations where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Affiliations where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Affiliations where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Affiliations where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Affiliations where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affiliations whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Affiliations whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
