/*
 * This file is generated by jOOQ.
 */
package ru.paskal.laba2.entities.tables.tables;


import java.time.LocalDate;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.paskal.laba2.entities.tables.Keys;
import ru.paskal.laba2.entities.tables.Laba2;
import ru.paskal.laba2.entities.tables.tables.Prizes.PrizesPath;
import ru.paskal.laba2.entities.tables.tables.records.LaureatesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Laureates extends TableImpl<LaureatesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>laba2.laureates</code>
     */
    public static final Laureates LAUREATES = new Laureates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LaureatesRecord> getRecordType() {
        return LaureatesRecord.class;
    }

    /**
     * The column <code>laba2.laureates.id</code>.
     */
    public final TableField<LaureatesRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>laba2.laureates.origin_id</code>.
     */
    public final TableField<LaureatesRecord, Integer> ORIGIN_ID = createField(DSL.name("origin_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>laba2.laureates.firstname</code>.
     */
    public final TableField<LaureatesRecord, String> FIRSTNAME = createField(DSL.name("firstname"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>laba2.laureates.surname</code>.
     */
    public final TableField<LaureatesRecord, String> SURNAME = createField(DSL.name("surname"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>laba2.laureates.born</code>.
     */
    public final TableField<LaureatesRecord, LocalDate> BORN = createField(DSL.name("born"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>laba2.laureates.died</code>.
     */
    public final TableField<LaureatesRecord, LocalDate> DIED = createField(DSL.name("died"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>laba2.laureates.born_country</code>.
     */
    public final TableField<LaureatesRecord, String> BORN_COUNTRY = createField(DSL.name("born_country"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>laba2.laureates.born_country_code</code>.
     */
    public final TableField<LaureatesRecord, String> BORN_COUNTRY_CODE = createField(DSL.name("born_country_code"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>laba2.laureates.born_city</code>.
     */
    public final TableField<LaureatesRecord, String> BORN_CITY = createField(DSL.name("born_city"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>laba2.laureates.died_country</code>.
     */
    public final TableField<LaureatesRecord, String> DIED_COUNTRY = createField(DSL.name("died_country"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>laba2.laureates.died_country_code</code>.
     */
    public final TableField<LaureatesRecord, String> DIED_COUNTRY_CODE = createField(DSL.name("died_country_code"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>laba2.laureates.died_city</code>.
     */
    public final TableField<LaureatesRecord, String> DIED_CITY = createField(DSL.name("died_city"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>laba2.laureates.gender</code>.
     */
    public final TableField<LaureatesRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.VARCHAR(10), this, "");

    private Laureates(Name alias, Table<LaureatesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Laureates(Name alias, Table<LaureatesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>laba2.laureates</code> table reference
     */
    public Laureates(String alias) {
        this(DSL.name(alias), LAUREATES);
    }

    /**
     * Create an aliased <code>laba2.laureates</code> table reference
     */
    public Laureates(Name alias) {
        this(alias, LAUREATES);
    }

    /**
     * Create a <code>laba2.laureates</code> table reference
     */
    public Laureates() {
        this(DSL.name("laureates"), null);
    }

    public <O extends Record> Laureates(Table<O> path, ForeignKey<O, LaureatesRecord> childPath, InverseForeignKey<O, LaureatesRecord> parentPath) {
        super(path, childPath, parentPath, LAUREATES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class LaureatesPath extends Laureates implements Path<LaureatesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> LaureatesPath(Table<O> path, ForeignKey<O, LaureatesRecord> childPath, InverseForeignKey<O, LaureatesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private LaureatesPath(Name alias, Table<LaureatesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public LaureatesPath as(String alias) {
            return new LaureatesPath(DSL.name(alias), this);
        }

        @Override
        public LaureatesPath as(Name alias) {
            return new LaureatesPath(alias, this);
        }

        @Override
        public LaureatesPath as(Table<?> alias) {
            return new LaureatesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Laba2.LABA2;
    }

    @Override
    public Identity<LaureatesRecord, Integer> getIdentity() {
        return (Identity<LaureatesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<LaureatesRecord> getPrimaryKey() {
        return Keys.LAUREATES_PKEY;
    }

    private transient PrizesPath _prizes;

    /**
     * Get the implicit to-many join path to the <code>laba2.prizes</code> table
     */
    public PrizesPath prizes() {
        if (_prizes == null)
            _prizes = new PrizesPath(this, null, Keys.PRIZES__PRIZES_LAUREATE_ID_FKEY.getInverseKey());

        return _prizes;
    }

    @Override
    public Laureates as(String alias) {
        return new Laureates(DSL.name(alias), this);
    }

    @Override
    public Laureates as(Name alias) {
        return new Laureates(alias, this);
    }

    @Override
    public Laureates as(Table<?> alias) {
        return new Laureates(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Laureates rename(String name) {
        return new Laureates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Laureates rename(Name name) {
        return new Laureates(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Laureates rename(Table<?> name) {
        return new Laureates(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laureates where(Condition condition) {
        return new Laureates(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laureates where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laureates where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laureates where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Laureates where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Laureates where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Laureates where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Laureates where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laureates whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Laureates whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
